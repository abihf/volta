on:
  push:
    branches:
      - main
    tags:
      - v*
  # pull_request:
  #   branches:
  #     - main

name: Production

jobs:
  linux:
    name: Build - Linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: linux-arm64-gnu
            target: aarch64-unknown-linux-gnu
          - name: linux-arm64-musl
            target: aarch64-unknown-linux-musl
          - name: linux-x64-gnu
            target: x86_64-unknown-linux-gnu
          - name: linux-x64-musl
            target: x86_64-unknown-linux-musl
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.63
          override: true
      - name: Cargo Cache
        uses: Swatinem/rust-cache@v2
      - name: Install cross
        run: cargo install cross
      - name: Build
        run: cross build --release --target ${{ matrix.target }}
      - name: Create artifact
        run: tar -czvf volta-${{ matrix.name }}.tar.gz volta volta-shim volta-migrate
        working-directory: target/${{ matrix.target }}/release
      - name: Upload release artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.name }}
          path: target/${{ matrix.target }}/release/volta-${{ matrix.name }}.tar.gz

  release:
    name: Publish release
    runs-on: ubuntu-latest
    needs:
      - linux
    if: github.event_name == 'push'
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Determine release version
        id: release_info
        env:
          TAG: ${{ github.ref }}
        run: echo "::set-output name=version::${TAG:11}"
      - name: Fetch linux-arm64-gnu artifact
        uses: actions/download-artifact@v2
        with:
          name: linux-arm64-gnu
          path: release
      - name: Fetch linux-arm64-musl artifact
        uses: actions/download-artifact@v2
        with:
          name: linux-arm64-musl
          path: release
      - name: Fetch linux-x64-gnu artifact
        uses: actions/download-artifact@v2
        with:
          name: linux-x64-gnu
          path: release
      - name: Fetch linux-x64-musl artifact
        uses: actions/download-artifact@v2
        with:
          name: linux-x64-musl
          path: release
      # - name: Fetch MacOS artifact
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: macos
      #     path: release
      # - name: Fetch MacOS (ARM) artifact
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: macos-aarch64
      #     path: release
      # - name: Fetch Windows installer
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: windows-installer
      #     path: release
      # - name: Fetch Windows zip
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: windows-zip
      #     path: release
      - name: Show release artifacts
        run: ls -la release
      - name: Create draft release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: true
      - name: Upload Linux artifact (arm64-gnu)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/volta-linux-arm64-gnu.tar.gz
          asset_name: volta-${{ steps.release_info.outputs.version }}-linux-arm64-gnu.tar.gz
          asset_content_type: application/gzip
      - name: Upload Linux artifact (arm64-musl)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/volta-linux-arm64-musl.tar.gz
          asset_name: volta-${{ steps.release_info.outputs.version }}-linux-arm64-musl.tar.gz
          asset_content_type: application/gzip
      - name: Upload Linux artifact (x64-gnu)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/volta-linux-x64-gnu.tar.gz
          asset_name: volta-${{ steps.release_info.outputs.version }}-linux-x64-gnu.tar.gz
          asset_content_type: application/gzip
      - name: Upload Linux artifact (x64-musl)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/volta-linux-x64-musl.tar.gz
          asset_name: volta-${{ steps.release_info.outputs.version }}-linux-x64-musl.tar.gz
          asset_content_type: application/gzip
      # - name: Upload MacOS artifact
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./release/volta-macos.tar.gz
      #     asset_name: volta-${{ steps.release_info.outputs.version }}-macos.tar.gz
      #     asset_content_type: application/gzip
      # - name: Upload MacOS (ARM) artifact
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./release/volta-macos-aarch64.tar.gz
      #     asset_name: volta-${{ steps.release_info.outputs.version }}-macos-aarch64.tar.gz
      #     asset_content_type: application/gzip
      # - name: Upload Windows installer
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./release/volta-windows.msi
      #     asset_name: volta-${{ steps.release_info.outputs.version }}-windows-x86_64.msi
      #     asset_content_type: application/x-msi
      # - name: Upload Windows zip
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./release/volta-windows.zip
      #     asset_name: volta-${{ steps.release_info.outputs.version }}-windows.zip
      #     asset_content_type: application/zip
      - name: Upload manifest file
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ci/volta.manifest
          asset_name: volta.manifest
          asset_content_type: text/plain
